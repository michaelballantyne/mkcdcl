In unification, the provenances of substitution associations explain a failure when they are involved in a walk that shows the two terms to be different---this is, in the else case of unify.

In disequality, association provenances explain a failure when they show the terms to be the same, as in the `eq?` and `equal?` cases. We don't care about associations that help show a difference!

So we can't use unify to implement disequality as we do normally. We need a different disunify that returns different provenance.

Examples:

A

1: (== x y)
2: (=/= x y)

unify succeeds with no extension
for diseq, provenance needs to indicate 2, 1

B

1: (=/= x y)

unify-for-=/= succeeds with extension (x . y)
we won't report a failure to SAT now, but we may later.
Now we unify:

2: (== x y)

try unify-for-=/= again; report 1, 2

C

1: (== y z)
2: (=/= x y)

unify-for-=/= succeeds with extension (x . z 2)

3: (== x z)

try unify-for-=/= again with pair (x . z 2)
failure. If we were naive about provenance, we'd get 2, 3.

We actually need to remember 1 as well.

Alternatively, we could remember that the original disequality was (=/= x y), and then
re-disunify the original constraint to get the provenance, rather than the simplified
pairs.

D:

1: (== y w)
2: (== w z)
3: (=/= x w)
(x . z)
4: (== x z)

(==-for-diseq x w)
2, 3, 4

E:

1: (== y w)
2: (== z w)
3: (=/= x y)
(x . w)
4: (== x z)

(==-for-diseq x y)
4, 2, 1, 3

F:

1: (== y w)
(y . w 1)
2: (== w z)
(w . z 2)
3: (=/= x y)
(x . z)
4: (== x z)
(x . z 4)

(==-for-diseq x y)
4, 1, 2, 3


Design plan:

Add two elements to a disequality constraint record:
 * the (single) provenance of the disequality constraint
 * the original disequality constraint. We'll re-apply this original constraint, rather than
     the simplified constraint, when we need to compute provenance. That way we don't have to
     worry about keeping track of provenance for every pair and feeding it back into unification
     every time we simplify.
